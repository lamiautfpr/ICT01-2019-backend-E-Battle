AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - qa
      - v1
  DBPassword:
    Type: String
    NoEcho: true
  DBUser:
    Type: String
    Default: ebattle
  DBName:
    Type: String
    Default: ebattle
  DBHost:
    Type: String
    Default: lamiadb1.ceoy3jbkraru.us-east-1.rds.amazonaws.com

Globals:
  Function:
    Runtime: nodejs16.x
    Architectures:
      - arm64
    Handler: index.handler
    Layers:
      - !Ref DatabaseLayer
    Timeout: 3
    Tags:
      Project: Ebattle
      Team: Api
    Environment:
      Variables:
        DB_PASSWORD: !Ref DBPassword
        DB_USER: !Ref DBUser
        DB_NAME: !Ref DBName
        DB_HOST: !Ref DBHost
  HttpApi:
    Tags:
      Project: Ebattle
      Team: Api

Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Tags:
        - Key: Project
          Value: Ebattle
        - Key: Team
          Value: Api
  AuthorizerFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: InvokeAuthorizerFunction
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeAsync
                  - lambda:InvokeFunction
                Resource: !GetAtt Authorizer.Arn
      Tags:
        - Key: Project
          Value: Ebattle
        - Key: Team
          Value: Api

  DatabaseLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: DatabaseLayer
      ContentUri: src/shared/database
      CompatibleRuntimes:
        - nodejs16.x
      RetentionPolicy: Retain
    Metadata:
      BuildMethod: nodejs16.x
      BuildArchitecture: arm64

  Authorizer:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/authorizer/
      Role: !GetAtt LambdaRole.Arn
  Log:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/_log/
      Role: !GetAtt LambdaRole.Arn
      Events:
        EbattleApi:
          Type: HttpApi
          Properties:
            ApiId: !Ref EbattleApi
  AuthorizerLog:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/_log/
      Role: !GetAtt LambdaRole.Arn
      Events:
        EbattleApi:
          Type: HttpApi
          Properties:
            ApiId: !Ref EbattleApi
            Path: /log/auth
            Method: ANY
            Auth:
              Authorizer: Authorizer
  Api:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/documentation/
      Role: !GetAtt LambdaRole.Arn
      Events:
        EbattleApi:
          Type: HttpApi
          Properties:
            ApiId: !Ref EbattleApi
            Path: /api
            Method: GET
  Games:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/endpoints/games/
      Role: !GetAtt LambdaRole.Arn
      Events:
        EbattleApiGet:
          Type: HttpApi
          Properties:
            ApiId: !Ref EbattleApi
            Path: /games
            Method: get
            Auth:
              Authorizer: Authorizer
        EbattleApiPost:
          Type: HttpApi
          Properties:
            ApiId: !Ref EbattleApi
            Path: /games
            Method: post
            Auth:
              Authorizer: Authorizer
  Matches:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/endpoints/matches/
      Role: !GetAtt LambdaRole.Arn
      Events:
        EbattleApiGet:
          Type: HttpApi
          Properties:
            ApiId: !Ref EbattleApi
            Path: /matches
            Method: get
            Auth:
              Authorizer: Authorizer
        EbattleApiPost:
          Type: HttpApi
          Properties:
            ApiId: !Ref EbattleApi
            Path: /matches/start
            Method: post
            Auth:
              Authorizer: Authorizer
  Languages:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/endpoints/languages/
      Role: !GetAtt LambdaRole.Arn
      Events:
        EbattleApi:
          Type: HttpApi
          Properties:
            ApiId: !Ref EbattleApi
            Path: /languages
            Method: get
            Auth:
              Authorizer: Authorizer
  Login:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/endpoints/login/
      Role: !GetAtt LambdaRole.Arn
      Events:
        EbattleApi:
          Type: HttpApi
          Properties:
            ApiId: !Ref EbattleApi
            Path: /login
            Method: post
  Categories:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/endpoints/categories/
      Role: !GetAtt LambdaRole.Arn
      Events:
        EbattleApi:
          Type: HttpApi
          Properties:
            ApiId: !Ref EbattleApi
            Path: /categories
            Method: get
            Auth:
              Authorizer: Authorizer
  EbattleApi:
    Type: AWS::Serverless::HttpApi
    DeletionPolicy: Retain
    Properties:
      StageName: !Ref Environment
      CorsConfiguration:
        AllowOrigins:
          - "*"
        AllowMethods:
          - "*"
        AllowHeaders:
          - "*"
      Auth:
        Authorizers:
          Authorizer:
            AuthorizerPayloadFormatVersion: 2.0
            EnableSimpleResponses: true
            FunctionArn: !GetAtt Authorizer.Arn
            FunctionInvokeRole: !GetAtt AuthorizerFunctionRole.Arn
            Identity:
              Headers:
                - Authorization
      Domain:
        DomainName: api.ebattle.lamia-edu.com
        CertificateArn: arn:aws:acm:us-east-1:619349481672:certificate/aff5f6d3-73ec-40dc-b943-c218c4dece6e
        Route53:
          HostedZoneId: Z08642582A3FQIV9BD2V3
        BasePath: !Ref Environment